CC=clang
CFLAGS=-emit-llvm -g $(OPTIMIZE) -ffreestanding --target=wasm32 -c -m32 $(INCLUDES) -fbracket-depth=512 $(WARN)
LD=wasm-ld

WARN += -Wno-parentheses-equality
WARN += -Wno-attributes
WARN += -Wno-return-type
WARN += -Wno-int-conversion
WARN += -Wno-incompatible-pointer-types
WARN += -Wno-incompatible-function-pointer-types
WARN += -Wno-pointer-sign
WARN += -Wno-bitfield-constant-conversion
WARN += -Wno-implicit-function-declaration

OPTIMIZE ?= -O0

LIB := ../../bin/libc.a
BUILD_DIR := ../../_build/$(shell basename $(shell pwd))

INCLUDES += -I../../lib

tests   := $(wildcard *.c)
testsbc := $(addprefix $(BUILD_DIR)/,$(tests:.c=.bc))
testso  := $(addprefix $(BUILD_DIR)/,$(tests:.c=.o))

.PHONY: clean

default: all

all: $(testso:.o=.wat) $(testso:.o=.yml)

$(BUILD_DIR)/%.bc: %.c
	@mkdir -p $(dir $@)
	@echo "Building $@"
	@echo "$(CC) $(CFLAGS) -o $@ $<"; $(CC) $(CFLAGS) -o $@ $<

$(BUILD_DIR)/%.o: $(BUILD_DIR)/%.bc
	@echo "Building $@"
	@opt -O1 $< -o $<
	@llc -O1 -march=wasm32 -filetype=obj $< -o $@

$(BUILD_DIR)/%.wasm: $(BUILD_DIR)/%.o
	@echo "Building $@"
	@$(LD) --no-entry --export-all $^ $(LIB) -o $@

$(BUILD_DIR)/%.wat: $(BUILD_DIR)/%.wasm
	@echo "Building $@"
	@wasm2wat $^ -o $@
	@./../../scripts/patch.sh $@

$(BUILD_DIR)/%.yml: %.yml
	@cp -v $< $@

clean:
	@echo "rm -rf $(BUILD_DIR)"; rm -rf $(BUILD_DIR)
